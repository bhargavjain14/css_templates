mkdir server
cd server
npm init -y
npm install express cors

===

// server/index.js
const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
app.use(cors());

app.get('/files', (req, res) => {
    const dirPath = req.query.path || __dirname;

    fs.readdir(dirPath, { withFileTypes: true }, (err, files) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        const fileDetails = files.map(file => ({
            name: file.name,
            path: path.join(dirPath, file.name),
            isDirectory: file.isDirectory(),
        }));

        res.json(fileDetails);
    });
});

app.get('/file-content', (req, res) => {
    const filePath = req.query.path;

    fs.readFile(filePath, 'utf-8', (err, content) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        res.json({ content });
    });
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});


=====

cd ../file-explorer-app
npm install @angular/common @angular/core @angular/http


===========

// src/app/file.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class FileService {
  private apiUrl = 'http://localhost:3000';

  constructor(private http: HttpClient) {}

  getFileStructure(path: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/files?path=${path}`);
  }

  getFileContent(path: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/file-content?path=${path}`);
  }
}

============

// src/app/file-explorer/file-explorer.component.ts
import { Component } from '@angular/core';
import { FileService } from '../file.service';

@Component({
  selector: 'app-file-explorer',
  templateUrl: './file-explorer.component.html',
  styleUrls: ['./file-explorer.component.css']
})
export class FileExplorerComponent {
  files: any[] = [];
  selectedFileContent: string = '';
  path: string = '';

  constructor(private fileService: FileService) {}

  loadFiles(): void {
    this.fileService.getFileStructure(this.path).subscribe(
      data => this.files = data,
      error => console.error('Error loading files', error)
    );
  }

  displayFileContent(filePath: string): void {
    this.fileService.getFileContent(filePath).subscribe(
      data => this.selectedFileContent = data.content,
      error => console.error('Error loading file content', error)
    );
  }
}

=======
<!-- src/app/file-explorer/file-explorer.component.html -->
<div>
  <input [(ngModel)]="path" placeholder="Enter path" />
  <button (click)="loadFiles()">Load Files</button>
</div>
<div *ngIf="files.length > 0">
  <ul>
    <li *ngFor="let file of files" (click)="displayFileContent(file.path)">
      {{ file.name }} ({{ file.isDirectory ? 'Directory' : 'File' }})
    </li>
  </ul>
</div>
<div *ngIf="selectedFileContent">
  <h2>File Content</h2>
  <pre>{{ selectedFileContent }}</pre>
</div>

===========
node index.js
https://copilot.microsoft.com/chats/8P8bQahfH6MwemL4a2eHr
