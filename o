describe('Component Test', () => {
  let component: YourComponent;
  let fixture: ComponentFixture<YourComponent>;

  // Mock gridOptions
  const gridApi = { getColumn: () => {} };
  const column = { getSort: () => {} };

  const mockGridOptions: GridOptions = {
    api: gridApi,
    columnApi: column
  };

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [YourComponent]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(YourComponent);
    component = fixture.componentInstance;

    // Inject GridOptions and set its value to the mock
    const gridOptions = fixture.debugElement.injector.get(GridOptions);
    spyOnProperty(gridOptions, 'api').and.returnValue(gridApi);
    spyOnProperty(gridOptions, 'columnApi').and.returnValue(column);

    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should mock getColumn and getSort', () => {
    const colName = 'yourColumnName';
    const sort = 'asc';

    // Setup the spies
    spyOn(gridApi, 'getColumn').and.returnValue(column);
    spyOn(column, 'getSort').and.returnValue(sort);

    // Call your method that uses getColumn().getSort()
    const result = component.yourMethodThatUsesGetColumnGetSort(colName);

    // Verify the spies were called
    expect(gridApi.getColumn).toHaveBeenCalledWith(colName);
    expect(column.getSort).toHaveBeenCalled();
    expect(result).toEqual(sort);
  });
});
